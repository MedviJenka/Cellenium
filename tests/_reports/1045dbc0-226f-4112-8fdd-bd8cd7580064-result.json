{"name": "test_navigate", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nfrom invalid argument: 'value' must be a single Unicode code point\n  (Session info: chrome=114.0.5735.134)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x002CA813+48355]\n\t(No symbol) [0x0025C4B1]\n\t(No symbol) [0x00165358]\n\t(No symbol) [0x001C18FD]\n\t(No symbol) [0x001C1B4E]\n\t(No symbol) [0x001AA73C]\n\t(No symbol) [0x001BC922]\n\t(No symbol) [0x001AA536]\n\t(No symbol) [0x001882DC]\n\t(No symbol) [0x001893DD]\n\tGetHandleVerifier [0x0052AABD+2539405]\n\tGetHandleVerifier [0x0056A78F+2800735]\n\tGetHandleVerifier [0x0056456C+2775612]\n\tGetHandleVerifier [0x003551E0+616112]\n\t(No symbol) [0x00265F8C]\n\t(No symbol) [0x00262328]\n\t(No symbol) [0x0026240B]\n\t(No symbol) [0x00254FF7]\n\tBaseThreadInitThunk [0x77980099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E47B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E47B3E+238]\n\t(No symbol) [0x00000000]", "trace": "self = <test_intro_page.TestIntroPage object at 0x000001CAB0AF3220>\n\n    def test_navigate(self) -> None:\n        self.engine.get_element('search').send_keys('cats')\n        self.engine.get_element('button').click()\n>       self.engine.press_keyboard_key('T', hold=True)\n\ngoogle\\test_intro_page.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\core\\infrastructure\\driver\\engine.py:158: in press_keyboard_key\n    return press.perform()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:87: in perform\n    self.w3c_actions.perform()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:91: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CAAFF7A7A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\nfrom invalid argument: \\'...jectPath [0x77E47B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E47B3E+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE       from invalid argument: 'value' must be a single Unicode code point\nE         (Session info: chrome=114.0.5735.134)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x002CA813+48355]\nE       \t(No symbol) [0x0025C4B1]\nE       \t(No symbol) [0x00165358]\nE       \t(No symbol) [0x001C18FD]\nE       \t(No symbol) [0x001C1B4E]\nE       \t(No symbol) [0x001AA73C]\nE       \t(No symbol) [0x001BC922]\nE       \t(No symbol) [0x001AA536]\nE       \t(No symbol) [0x001882DC]\nE       \t(No symbol) [0x001893DD]\nE       \tGetHandleVerifier [0x0052AABD+2539405]\nE       \tGetHandleVerifier [0x0056A78F+2800735]\nE       \tGetHandleVerifier [0x0056456C+2775612]\nE       \tGetHandleVerifier [0x003551E0+616112]\nE       \t(No symbol) [0x00265F8C]\nE       \t(No symbol) [0x00262328]\nE       \t(No symbol) [0x0026240B]\nE       \t(No symbol) [0x00254FF7]\nE       \tBaseThreadInitThunk [0x77980099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E47B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E47B3E+238]\nE       \t(No symbol) [0x00000000]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException"}, "attachments": [{"name": "elements used", "source": "167d633f-7d2e-405d-804a-6b95aed465ed-attachment.txt", "type": "text/plain"}, {"name": "elements used", "source": "d24dcd64-52c4-4b3b-972c-733476ea230d-attachment.txt", "type": "text/plain"}], "start": 1687784446746, "stop": 1687784454104, "uuid": "1391b459-588a-4728-9ff0-9facfab06136", "historyId": "7796a0ba12118b2d6b1678d2ee1eda04", "testCaseId": "7796a0ba12118b2d6b1678d2ee1eda04", "fullName": "google.test_intro_page.TestIntroPage#test_navigate", "labels": [{"name": "parentSuite", "value": "google"}, {"name": "suite", "value": "test_intro_page"}, {"name": "subSuite", "value": "TestIntroPage"}, {"name": "host", "value": "IL-EVGENYP-LP"}, {"name": "thread", "value": "51800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "google.test_intro_page"}]}