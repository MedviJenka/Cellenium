{"name": "test_exit_all", "status": "broken", "statusDetails": {"message": "TypeError: catching classes that do not inherit from BaseException is not allowed", "trace": "self = DriverEngine(screen='IntroPage')\n\n    def teardown(self) -> None:\n        try:\n>           self.driver.close()\n\n..\\core\\infrastructure\\driver\\engine.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68a1265a5aa4180a6f12c3c342add401\")>\n\n    def close(self) -> None:\n        \"\"\"Closes the current window.\n    \n        :Usage:\n            ::\n    \n                driver.close()\n        \"\"\"\n>       self.execute(Command.CLOSE)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68a1265a5aa4180a6f12c3c342add401\")>\ndriver_command = 'close', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027C5C01A8C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C17B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C17B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0082A813+48355]\nE       \t(No symbol) [0x007BC4B1]\nE       \t(No symbol) [0x006C5358]\nE       \t(No symbol) [0x006B70EB]\nE       \t(No symbol) [0x006B77AA]\nE       \t(No symbol) [0x006B7748]\nE       \t(No symbol) [0x006AC2AA]\nE       \t(No symbol) [0x006ACB1D]\nE       \t(No symbol) [0x007127B8]\nE       \t(No symbol) [0x0070A703]\nE       \t(No symbol) [0x006E82DC]\nE       \t(No symbol) [0x006E93DD]\nE       \tGetHandleVerifier [0x00A8AABD+2539405]\nE       \tGetHandleVerifier [0x00ACA78F+2800735]\nE       \tGetHandleVerifier [0x00AC456C+2775612]\nE       \tGetHandleVerifier [0x008B51E0+616112]\nE       \t(No symbol) [0x007C5F8C]\nE       \t(No symbol) [0x007C2328]\nE       \t(No symbol) [0x007C240B]\nE       \t(No symbol) [0x007B4FF7]\nE       \tBaseThreadInitThunk [0x76C60099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C17B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C17B3E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_intro_page.TestIntroPage object at 0x0000027C3C1300A0>\n\n    def test_exit_all(self) -> None:\n>       self.engine.teardown()\n\ngoogle\\test_intro_page.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = DriverEngine(screen='IntroPage')\n\n    def teardown(self) -> None:\n        try:\n            self.driver.close()\n            self.driver.quit()\n>       except self.driver is None:\nE       TypeError: catching classes that do not inherit from BaseException is not allowed\n\n..\\core\\infrastructure\\driver\\engine.py:223: TypeError"}, "start": 1688910196091, "stop": 1688910196093, "uuid": "5a01a05a-3bbd-493f-9632-8e3a0125bc2a", "historyId": "71084425ced3e7852b51d5d75a8206a2", "testCaseId": "71084425ced3e7852b51d5d75a8206a2", "fullName": "google.test_intro_page.TestIntroPage#test_exit_all", "labels": [{"name": "parentSuite", "value": "google"}, {"name": "suite", "value": "test_intro_page"}, {"name": "subSuite", "value": "TestIntroPage"}, {"name": "host", "value": "IL-EVGENYP-LP"}, {"name": "thread", "value": "25816-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "google.test_intro_page"}]}