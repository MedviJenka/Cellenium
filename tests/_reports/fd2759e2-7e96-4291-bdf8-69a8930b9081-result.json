{"name": "test_navigate", "status": "broken", "statusDetails": {"message": "TypeError: Attach.__call__() got an unexpected keyword argument 'fixture_funcction'", "trace": "self = DriverEngine(screen='IntroPage'), name = 'button', wait = 10\n\n    def get_element(self, name: str, wait=10) -> webdriver:\n    \n        self.driver.implicitly_wait(wait)\n        element_locator = get_locator(self.screen, name)\n        element_type = get_type(self.screen, name)\n    \n        try:\n    \n            match element_type:\n    \n                case 'NAME':\n>                   return self.driver.find_element(Type.NAME, element_locator)\n\n..\\core\\infrastructure\\driver\\engine.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c65758da0caa9f9ffa4c7ed32790ea5e\")>\nby = 'css selector', value = '[name=\"btn\"]'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:740: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c65758da0caa9f9ffa4c7ed32790ea5e\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[name=\"btn\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000231EC455A80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77727B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77727B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"btn\"]\"}\nE         (Session info: chrome=114.0.5735.134); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00B8A813+48355]\nE       \t(No symbol) [0x00B1C4B1]\nE       \t(No symbol) [0x00A25358]\nE       \t(No symbol) [0x00A509A5]\nE       \t(No symbol) [0x00A50B3B]\nE       \t(No symbol) [0x00A7E232]\nE       \t(No symbol) [0x00A6A784]\nE       \t(No symbol) [0x00A7C922]\nE       \t(No symbol) [0x00A6A536]\nE       \t(No symbol) [0x00A482DC]\nE       \t(No symbol) [0x00A493DD]\nE       \tGetHandleVerifier [0x00DEAABD+2539405]\nE       \tGetHandleVerifier [0x00E2A78F+2800735]\nE       \tGetHandleVerifier [0x00E2456C+2775612]\nE       \tGetHandleVerifier [0x00C151E0+616112]\nE       \t(No symbol) [0x00B25F8C]\nE       \t(No symbol) [0x00B22328]\nE       \t(No symbol) [0x00B2240B]\nE       \t(No symbol) [0x00B14FF7]\nE       \tBaseThreadInitThunk [0x75910099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77727B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77727B3E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_intro_page.TestIntroPage object at 0x00000231ECBD7E20>\n\n    def test_navigate(self) -> None:\n        self.engine.get_element('search').send_keys('cats')\n        try:\n>           self.engine.get_element('button').click()\n\ngoogle\\test_intro_page.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = DriverEngine(screen='IntroPage'), name = 'button', wait = 10\n\n    def get_element(self, name: str, wait=10) -> webdriver:\n    \n        self.driver.implicitly_wait(wait)\n        element_locator = get_locator(self.screen, name)\n        element_type = get_type(self.screen, name)\n    \n        try:\n    \n            match element_type:\n    \n                case 'NAME':\n                    return self.driver.find_element(Type.NAME, element_locator)\n    \n                case 'ID':\n                    return self.driver.find_element(Type.ID, element_locator)\n    \n                case 'CSS':\n                    return self.driver.find_element(Type.CSS, element_locator)\n    \n                case 'XPATH':\n                    return self.driver.find_element(Type.XPATH, element_locator)\n    \n                case 'TEXT':\n                    return self.driver.find_element(Type.TEXT, element_locator)\n    \n                case 'CLASS':\n                    return self.driver.find_element(Type.CLASS, element_locator)\n    \n                case _:\n                    raise Exception\n    \n        except Exception as e:\n>           self.attach_screenshot()\n\n..\\core\\infrastructure\\driver\\engine.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = DriverEngine(screen='IntroPage')\n\n    def attach_screenshot(self) -> None:\n>       allure.attach(fixture_funcction=self.driver.get_screenshot_as_png(),\n                      name=\"Screenshot\",\n                      attachment_type=AttachmentType.PNG)\nE       TypeError: Attach.__call__() got an unexpected keyword argument 'fixture_funcction'\n\n..\\core\\infrastructure\\driver\\engine.py:133: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_intro_page.TestIntroPage object at 0x00000231ECBD7E20>\n\n    def test_navigate(self) -> None:\n        self.engine.get_element('search').send_keys('cats')\n        try:\n            self.engine.get_element('button').click()\n        except Exception as e:\n>           self.engine.attach_screenshot()\n\ngoogle\\test_intro_page.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = DriverEngine(screen='IntroPage')\n\n    def attach_screenshot(self) -> None:\n>       allure.attach(fixture_funcction=self.driver.get_screenshot_as_png(),\n                      name=\"Screenshot\",\n                      attachment_type=AttachmentType.PNG)\nE       TypeError: Attach.__call__() got an unexpected keyword argument 'fixture_funcction'\n\n..\\core\\infrastructure\\driver\\engine.py:133: TypeError"}, "start": 1687094805067, "stop": 1687094815439, "uuid": "273b7b44-0ab0-42ee-a95e-fe6886e9a55e", "historyId": "ace827ac94a815b22d0f4cc9eae75e47", "testCaseId": "7796a0ba12118b2d6b1678d2ee1eda04", "fullName": "google.test_intro_page.TestIntroPage#test_navigate", "labels": [{"name": "parentSuite", "value": "google"}, {"name": "suite", "value": "test_intro_page"}, {"name": "subSuite", "value": "TestIntroPage"}, {"name": "host", "value": "IL-EVGENYP-LP"}, {"name": "thread", "value": "55572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "google.test_intro_page"}]}