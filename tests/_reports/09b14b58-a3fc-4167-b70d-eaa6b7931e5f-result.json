{"name": "test_get_logos_list", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[2]/div[2]/div/div[2]\"}\n  (Session info: chrome=120.0.6099.227); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x010572A3+45731]\n\t(No symbol) [0x00FE2D51]\n\t(No symbol) [0x00ED880D]\n\t(No symbol) [0x00F0B940]\n\t(No symbol) [0x00F0BE0B]\n\t(No symbol) [0x00F3D1F2]\n\t(No symbol) [0x00F28024]\n\t(No symbol) [0x00F3B7A2]\n\t(No symbol) [0x00F27DD6]\n\t(No symbol) [0x00F031F6]\n\t(No symbol) [0x00F0439D]\n\tGetHandleVerifier [0x01360716+3229462]\n\tGetHandleVerifier [0x013A84C8+3523784]\n\tGetHandleVerifier [0x013A214C+3498316]\n\tGetHandleVerifier [0x010E1680+611968]\n\t(No symbol) [0x00FECCCC]\n\t(No symbol) [0x00FE8DF8]\n\t(No symbol) [0x00FE8F1D]\n\t(No symbol) [0x00FDB2C7]\n\tBaseThreadInitThunk [0x76B17BA9+25]\n\tRtlInitializeExceptionChain [0x77B5BD2B+107]\n\tRtlClearBits [0x77B5BCAF+191]", "trace": "self = <test_intro.TestTipalti object at 0x000001DCC5D7C070>\n\n    def test_get_logos_list(self) -> None:\n>       self.engine.get_element('logos')\n\ntipalti\\test_intro.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\core\\infrastructure\\driver\\engine.py:68: in get_element\n    raise e\n..\\core\\infrastructure\\driver\\engine.py:64: in get_element\n    return self.driver.find_element(Type[element_type].value, element_locator)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DC965C2E90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x76B17BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77B5BD2B+107]\\\\n\\\\tRtlClearBits [0x77B5BCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div[2]/div[2]/div/div[2]\"}\nE         (Session info: chrome=120.0.6099.227); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010572A3+45731]\nE       \t(No symbol) [0x00FE2D51]\nE       \t(No symbol) [0x00ED880D]\nE       \t(No symbol) [0x00F0B940]\nE       \t(No symbol) [0x00F0BE0B]\nE       \t(No symbol) [0x00F3D1F2]\nE       \t(No symbol) [0x00F28024]\nE       \t(No symbol) [0x00F3B7A2]\nE       \t(No symbol) [0x00F27DD6]\nE       \t(No symbol) [0x00F031F6]\nE       \t(No symbol) [0x00F0439D]\nE       \tGetHandleVerifier [0x01360716+3229462]\nE       \tGetHandleVerifier [0x013A84C8+3523784]\nE       \tGetHandleVerifier [0x013A214C+3498316]\nE       \tGetHandleVerifier [0x010E1680+611968]\nE       \t(No symbol) [0x00FECCCC]\nE       \t(No symbol) [0x00FE8DF8]\nE       \t(No symbol) [0x00FE8F1D]\nE       \t(No symbol) [0x00FDB2C7]\nE       \tBaseThreadInitThunk [0x76B17BA9+25]\nE       \tRtlInitializeExceptionChain [0x77B5BD2B+107]\nE       \tRtlClearBits [0x77B5BCAF+191]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "start": 1706455393895, "stop": 1706455404059, "uuid": "73cde704-5f2e-432a-9c20-d46fe301a034", "historyId": "955d5d728a8377d537224d782e89cea0", "testCaseId": "955d5d728a8377d537224d782e89cea0", "fullName": "tipalti.test_intro.TestTipalti#test_get_logos_list", "labels": [{"name": "parentSuite", "value": "tipalti"}, {"name": "suite", "value": "test_intro"}, {"name": "subSuite", "value": "TestTipalti"}, {"name": "host", "value": "LAPTOP-6VHLMB5Q"}, {"name": "thread", "value": "20708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tipalti.test_intro"}]}